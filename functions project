#include <iostream>

using namespace std;

////////////function prototypes for user selection/////////////////
void display_menu();
char get_selection();
///////////////////////////////////////////////////////////////////

////////////function prototypes for menu handling /////////////////
void handle_display (const vector <int> &v);
void handle_add (vector <int> &v);
void handle_mean(const vector <int> &v);
void handle_smallest(const vector <int> &v);
void handle_largest(const vector <int> &v);
void handle_quit();
void handle_unknown();
///////////////////////////////////////////////////////////////////

///////////function prototypes for inbuilt functins////////////////
void display_list(v);
double calculate_mean(v)

int main()
{
    vector <int> numbers{};
    char selection{};
    do{
        display_menu();
        selection=get_selection();
        switch (selection)
        {
            case 'P':
            handle_display(numbers);
            break;
            
            case 'A':
            handle_add(numbers);
            break;
            
            case 'M':
            handle_mean(numbers);
            break;
            
            case 'S':
            handle_smallest(numbers);
            break;
            
            case 'L':
            handle_largest(numbers);
            break;
            
            case 'Q':
            handle_quit();
            break;
            
            default:
            handle_unknown();
            
        }
    }
}

//////////////////////////int main is over//////////////////////////////

void display_menu{
    cout<<"\nP- print numbers"<<endl;
    cout<<"A- add number"<<endl;
    cout<<"M- display mean of number"<<endl;
    cout<<"S- display the smallest number"<<endl;
    cout<<"L- display the largest number"<<endl;
    cout<<"Q- quit"<<endl;
    cout<<"enter your choise"<<endl;
    
}

/////////////////////////////display menu is over///////////////////////

char get_selection(){
    char selection();
    cin>>selection;
    return toupper(selection);
}
////////////////////////////get selection is over//////////////////////

void handle_display (const vector<int> &v)
{
    if (v.size==0)
    {
        cout<<"the list is empty"<<endl;
    }
    
    else 
    {
        display_list(v);
    }
    
}

void display_list(v);
{
    cout<<"[ ";
    for(auto num: v)
    cout<<num;
    cout<<" ]";
}
///////////////////////// print option is over///////////////////////////


void handle_add(vector <int> &v)
{
    int num_to_add();
    cout<<"enter an integer to add to the list";
    cin>>num_to_add;
    v.push_back(num_to_add);
    cout<<num_to_add<<" is added"<<endl;
}

/////////////////////// add option is over////////////////////////////////

void handle_mean (const <int> &v)
{
    if (v.size()==0)
    {
        cout<<"unable to calculate mean as the list is empty"<<endl;
    }
    else
    {
        cout<<" the calculated mean is "<<calculate_mean(v)endl;
    }
}

double calculate_mean(v)
{
    int total {};
    for (auto num: v)
    total+=num;
    
    return static_cast <double>(total)/v.size();
}
void handle_smallest(const <int> &v)
{
    if (v.size()==0)
    {
        cout<<" the list is empty"<<endl;
    }
    else 
    void find_smallest(const <int> &v);
    
}


find_smallest(const <int> &v)
{
    int smallest{};
    smallest=v.at(0);
    for (auto v: v)
    {
    if (v<smallest)
    smallest=v;
    }
    cout<<"the smallest number is "<<smallest<<endl;
}

//////////////////////// smallest option is over ////////////////////////////
void handle_largest(const <int> &v)
{
    if (v.size()==0)
    {
        cout<<" the list is empty"<<endl;
    }
    else 
    void find_largest(const <int> &v);
    
}


find_largest(const <int> &v)
{
    int largest{};
    largest=v.at(0);
    for (auto v: v)
    {
    if (v>largest)
    largest=v;
    }
    cout<<"the largest number is "<<largest<<endl;
}

//////////////////////////////  largest menu is over ////////////////////////////////

void handle_quit ()
{
    cout<<" thankyou :) good bye! "<<endl;
}

/////////////////////////////quit menu is over ////////////////////////////////////

void handle_unknown ()
{
    cout<<"unknown selection :( try again!"<<endl;
}

////////////////////////////unkown menu is over/////////////////////////////////////
